program:
  : sentence
  | sentence '\n' program
  |
  ;
sentence
  : data-literal
  | data-literal ' ' data-literal-sequence
  ;
data-literal
  : list
  | tuple
  | map
  | primitive
  ;
primitive
  : integer
  | atom
  | boolean
  ;
list
  : '[' data-literal-comma ']'
  : '[' ']'
  ;
tuple
  : '{' data-literal-comma '}'
  | '{' '}'
  ;
map
  : '%{' key-pair-comma '}'
  | '%{' '}'
  ;
key-pair
  : data-literal '=>' data-literal
  | key ' ' data-literal
  ;
integer
  : num
  | num integer
  | num '_' integer
  ;
atom
  : ':' alpha
  | ':' alpha alpha-num-under
  | ':' alpha-num-under
  ;
key
  : alpha ':'
  | alpha alpha-num-under ':'
  | alpha-num-under ':'
  ;
boolean
  : 'true'
  | 'false'
  ;
data-literal-comma
  : data-literal
  | data-literal ',' data-literal-comma
  ;
key-pair-comma
  : key-pair
  ; key-pair ',' key-pair-comma
  ;
alpha-num-under
  : '_'
  | '_' alpha-num-under
  | alpha-num
  ;
alpha-under
  : '_'
  | alpha
  | '_' alpha-under
  | alpha alpha-under
  ;
alpha
  : a-z
  | A-Z
  | a-z alpha
  | A-Z alpha
  ;
num
  : 0-9
  | 0-9 num
  ;
alpha-num
  : alpha
  | num
  | alpha alpha-num
  | num alpha-num
  ;